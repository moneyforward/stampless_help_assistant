#!/usr/bin/env node

/**
 * SQLÂÆüË°å & CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÉÑ„Éº„É´
 * stampless_backend„ÅÆMySQL„Å´Êé•Á∂ö„Åó„Å¶SQL„ÇØ„Ç®„É™„ÇíÂÆüË°å„Åó„ÄÅÁµêÊûú„ÇíCSVÂá∫Âäõ
 * ‰ΩøÁî®ÊñπÊ≥ï: node sql-export.js --query "SELECT * FROM navis_offices LIMIT 10"
 */

const fs = require('fs');
const path = require('path');

// Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Åã„ÇâÊé•Á∂öÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø
const CONFIG_FILE = path.join(__dirname, '../config/database-config-simple.json');

/**
 * Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
 */
function loadConfig() {
  if (!fs.existsSync(CONFIG_FILE)) {
    console.error('‚ùå Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', CONFIG_FILE);
    console.log('\nüìã Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
    console.log('cp config/database-config-simple.example.json config/database-config-simple.json');
    process.exit(1);
  }
  
  return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));
}

/**
 * SQL„ÇØ„Ç®„É™ÂÆüË°å
 */
async function executeQuery(query, config) {
  const mysql = require('mysql2/promise');
  
  try {
    const connection = await mysql.createConnection({
      host: config.host,
      user: config.user,
      password: config.password,
      database: config.database,
      port: config.port || 3306
    });

    console.log('üîó „Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åó„Åæ„Åó„Åü');
    console.log(`üìä ÂÆüË°å„Åô„Çã„ÇØ„Ç®„É™:\n${query}\n`);
    
    const [rows, fields] = await connection.execute(query);
    
    await connection.end();
    
    console.log(`‚úÖ „ÇØ„Ç®„É™ÂÆüË°åÂÆå‰∫Ü: ${rows.length}‰ª∂„ÅÆ„É¨„Ç≥„Éº„Éâ„ÇíÂèñÂæó`);
    
    return { rows, fields };
    
  } catch (error) {
    console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº:', error.message);
    console.log('\nüîß ÂØæÂá¶Ê≥ï:');
    console.log('1. config/database-config-simple.json „ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç');
    console.log('2. VPNÊé•Á∂ö„ÇíÁ¢∫Ë™ç');
    console.log('3. DBÁÆ°ÁêÜËÄÖ„Å´Ë™≠„ÅøÂèñ„ÇäÊ®©Èôê„Çí‰æùÈ†º');
    console.log('4. SQL„ÇØ„Ç®„É™„ÅÆÊßãÊñá„ÇíÁ¢∫Ë™ç');
    return null;
  }
}

/**
 * ÁµêÊûú„ÇíCSV„Éï„Ç°„Ç§„É´„Å´Âá∫Âäõ
 */
function exportToCSV(rows, fields, filename) {
  if (!rows || rows.length === 0) {
    console.log('‚ùå Âá∫Âäõ„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
    return null;
  }
  
  // „Éò„ÉÉ„ÉÄ„ÉºË°å‰ΩúÊàê
  const headers = fields.map(field => field.name);
  let csvContent = headers.join(',') + '\n';
  
  // „Éá„Éº„ÇøË°å‰ΩúÊàê
  rows.forEach(row => {
    const values = headers.map(header => {
      let value = row[header];
      
      // ÂÄ§„ÅÆÂá¶ÁêÜ
      if (value === null || value === undefined) {
        value = '';
      } else if (typeof value === 'string') {
        // CSV„Ç®„Çπ„Ç±„Éº„ÉóÔºà„Ç´„É≥„Éû„ÄÅÊîπË°å„ÄÅ„ÉÄ„Éñ„É´„ÇØ„Ç©„Éº„ÉàÂØæÂøúÔºâ
        if (value.includes(',') || value.includes('\n') || value.includes('"')) {
          value = '"' + value.replace(/"/g, '""') + '"';
        }
      } else if (value instanceof Date) {
        value = value.toISOString().split('T')[0]; // YYYY-MM-DDÂΩ¢Âºè
      }
      
      return value;
    });
    
    csvContent += values.join(',') + '\n';
  });
  
  // „Éï„Ç°„Ç§„É´Âá∫Âäõ
  const outputDir = path.join(__dirname, '../output');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  const outputPath = path.join(outputDir, filename);
  fs.writeFileSync(outputPath, csvContent, 'utf8');
  
  console.log(`üìÑ CSV„Éï„Ç°„Ç§„É´„ÇíÂá∫Âäõ„Åó„Åæ„Åó„Åü: ${outputPath}`);
  return outputPath;
}

/**
 * ÁµêÊûú„ÇíMarkdown„ÉÜ„Éº„Éñ„É´„ÅßË°®Á§∫
 */
function displayAsTable(rows, fields, limit = 20) {
  if (!rows || rows.length === 0) {
    console.log('‚ùå Ë°®Á§∫„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
    return;
  }
  
  console.log('\nüìã „ÇØ„Ç®„É™ÁµêÊûú„Éó„É¨„Éì„É•„Éº:');
  
  // „Éò„ÉÉ„ÉÄ„Éº
  const headers = fields.map(field => field.name);
  console.log('| ' + headers.join(' | ') + ' |');
  console.log('|' + headers.map(() => '---').join('|') + '|');
  
  // „Éá„Éº„ÇøË°åÔºàÂà∂Èôê„ÅÇ„ÇäÔºâ
  const displayRows = rows.slice(0, limit);
  displayRows.forEach(row => {
    const values = headers.map(header => {
      let value = row[header];
      if (value === null || value === undefined) {
        return 'NULL';
      } else if (typeof value === 'string' && value.length > 30) {
        return value.substring(0, 27) + '...';
      } else if (value instanceof Date) {
        return value.toISOString().split('T')[0];
      }
      return String(value);
    });
    console.log('| ' + values.join(' | ') + ' |');
  });
  
  if (rows.length > limit) {
    console.log(`\n... and ${rows.length - limit} more rows (see CSV file for all data)`);
  }
}

/**
 * ‰∫ãÂâçÂÆöÁæ©„ÇØ„Ç®„É™„ÅÆÂÆüË°å
 */
function getPredefinedQuery(queryName) {
  const queries = {
    'customers': `
      SELECT 
        o.id as office_id,
        o.tenant_uid,
        o.name as company_name,
        o.identification_code,
        abm.corporate_number,
        DATE_FORMAT(o.created_at, '%Y-%m-%d') as created_date
      FROM navis_offices o 
      LEFT JOIN address_book_masters abm ON o.id = abm.navis_office_id
      ORDER BY o.created_at DESC
      LIMIT 100
    `,
    
    'recent': `
      SELECT 
        o.id as office_id,
        o.tenant_uid,
        o.name as company_name,
        abm.corporate_number,
        DATE_FORMAT(o.updated_at, '%Y-%m-%d %H:%i') as last_updated
      FROM navis_offices o 
      LEFT JOIN address_book_masters abm ON o.id = abm.navis_office_id
      WHERE o.updated_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
      ORDER BY o.updated_at DESC
    `,
    
    'stats': `
      SELECT 
        COUNT(DISTINCT o.id) as total_offices,
        COUNT(DISTINCT o.tenant_uid) as total_tenant_uids,
        COUNT(DISTINCT abm.corporate_number) as total_corporate_numbers,
        MIN(DATE_FORMAT(o.created_at, '%Y-%m-%d')) as oldest_office,
        MAX(DATE_FORMAT(o.created_at, '%Y-%m-%d')) as newest_office
      FROM navis_offices o 
      LEFT JOIN address_book_masters abm ON o.id = abm.navis_office_id
    `,
    
    'search': `
      SELECT 
        o.id as office_id,
        o.tenant_uid,
        o.name as company_name,
        o.identification_code,
        abm.corporate_number,
        CONCAT('https://aweb.moneyforward.com/offices/', o.id) as aweb_url
      FROM navis_offices o 
      LEFT JOIN address_book_masters abm ON o.id = abm.navis_office_id
      WHERE o.name LIKE '%„Éû„Éç„Éº„Éï„Ç©„ÉØ„Éº„Éâ%'
      ORDER BY o.created_at DESC
    `
  };
  
  return queries[queryName] || null;
}

/**
 * „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞Ëß£Êûê
 */
function parseArgs() {
  const args = process.argv.slice(2);
  const params = {};
  
  for (let i = 0; i < args.length; i += 2) {
    const key = args[i]?.replace(/^--/, '');
    const value = args[i + 1];
    if (key && value) {
      params[key] = value;
    }
  }
  
  return params;
}

/**
 * ‰ΩøÁî®ÊñπÊ≥ïË°®Á§∫
 */
function showUsage() {
  console.log(`
üìä SQLÂÆüË°å & CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÉÑ„Éº„É´

‰ΩøÁî®ÊñπÊ≥ï:
  node sql-export.js --query "SELECTÊñá" [--output „Éï„Ç°„Ç§„É´Âêç] [--limit Ë°®Á§∫‰ª∂Êï∞]

‰∫ãÂâçÂÆöÁæ©„ÇØ„Ç®„É™:
  node sql-export.js --preset customers    # È°ßÂÆ¢‰∏ÄË¶ß(100‰ª∂)
  node sql-export.js --preset recent       # ÊúÄËøëÊõ¥Êñ∞„Åï„Çå„ÅüÈ°ßÂÆ¢
  node sql-export.js --preset stats        # Áµ±Ë®àÊÉÖÂ†±
  node sql-export.js --preset search       # „Éû„Éç„Éº„Éï„Ç©„ÉØ„Éº„ÉâÈ°ßÂÆ¢Ê§úÁ¥¢

„Ç´„Çπ„Çø„É†„ÇØ„Ç®„É™‰æã:
  # ÁâπÂÆö„ÅÆ‰ºöÁ§æ„ÇíÊ§úÁ¥¢
  node sql-export.js --query "SELECT o.id, o.name, o.tenant_uid FROM navis_offices o WHERE o.name LIKE '%„Çµ„É≥„Éó„É´%'"
  
  # tenant_uid„ÅßÊ§úÁ¥¢
  node sql-export.js --query "SELECT * FROM navis_offices WHERE tenant_uid = 67890"
  
  # ‰∫ãÊ•≠ËÄÖÁï™Âè∑„ÅßÊ§úÁ¥¢
  node sql-export.js --query "SELECT o.*, abm.corporate_number FROM navis_offices o JOIN address_book_masters abm ON o.id = abm.navis_office_id WHERE abm.corporate_number = '1234567890123'"

„Ç™„Éó„Ç∑„Éß„É≥:
  --query     ÂÆüË°å„Åô„ÇãSQL„ÇØ„Ç®„É™
  --preset    ‰∫ãÂâçÂÆöÁæ©„ÇØ„Ç®„É™Âêç (customers, recent, stats, search)
  --output    Âá∫ÂäõCSV„Éï„Ç°„Ç§„É´Âêç („Éá„Éï„Ç©„É´„Éà: query-result-TIMESTAMP.csv)
  --limit     „ÉÜ„Éº„Éñ„É´Ë°®Á§∫‰ª∂Êï∞ („Éá„Éï„Ç©„É´„Éà: 20‰ª∂)

‚ö†Ô∏è Ê≥®ÊÑè:
- SELECTÊñá„ÅÆ„Åø‰ΩøÁî®ÂèØËÉΩÔºàINSERT/UPDATE/DELETE‰∏çÂèØÔºâ
- Â§ßÈáè„Éá„Éº„Çø„ÅÆÂ†¥Âêà„ÅØLIMIT„Çí‰ΩøÁî®Êé®Â•®
- ÊöóÂè∑Âåñ„Éï„Ç£„Éº„É´„Éâ(*_enc)„ÅØÂæ©Âè∑Âåñ„Åï„Çå„Åæ„Åõ„Çì
  `);
}

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  const params = parseArgs();
  
  if (Object.keys(params).length === 0 || params.help || params.h) {
    showUsage();
    process.exit(0);
  }
  
  // „ÇØ„Ç®„É™„ÅÆÊ±∫ÂÆö
  let query;
  if (params.preset) {
    query = getPredefinedQuery(params.preset);
    if (!query) {
      console.error(`‚ùå ‰∏çÊòé„Å™‰∫ãÂâçÂÆöÁæ©„ÇØ„Ç®„É™: ${params.preset}`);
      console.log('Âà©Áî®ÂèØËÉΩ: customers, recent, stats, search');
      process.exit(1);
    }
    console.log(`üîç ‰∫ãÂâçÂÆöÁæ©„ÇØ„Ç®„É™„ÇíÂÆüË°å: ${params.preset}`);
  } else if (params.query) {
    query = params.query;
    
    // ÂÆâÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØÔºàSELECTÊñá„ÅÆ„ÅøË®±ÂèØÔºâ
    const upperQuery = query.trim().toUpperCase();
    if (!upperQuery.startsWith('SELECT')) {
      console.error('‚ùå SELECTÊñá„ÅÆ„Åø‰ΩøÁî®ÂèØËÉΩ„Åß„Åô');
      process.exit(1);
    }
    
    if (upperQuery.includes('INSERT') || upperQuery.includes('UPDATE') || upperQuery.includes('DELETE') || upperQuery.includes('DROP')) {
      console.error('‚ùå „Éá„Éº„ÇøÂ§âÊõ¥„ÇØ„Ç®„É™„ÅØ‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì');
      process.exit(1);
    }
  } else {
    console.error('‚ùå --query „Åæ„Åü„ÅØ --preset „ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    showUsage();
    process.exit(1);
  }
  
  // Ë®≠ÂÆöË™≠„ÅøËæº„Åø
  const config = loadConfig();
  
  // „ÇØ„Ç®„É™ÂÆüË°å
  const result = await executeQuery(query, config);
  if (!result) {
    process.exit(1);
  }
  
  const { rows, fields } = result;
  
  // „ÉÜ„Éº„Éñ„É´Ë°®Á§∫
  const displayLimit = parseInt(params.limit) || 20;
  displayAsTable(rows, fields, displayLimit);
  
  // CSVÂá∫Âäõ
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const defaultFilename = `query-result-${timestamp}.csv`;
  const filename = params.output || defaultFilename;
  
  exportToCSV(rows, fields, filename);
  
  console.log('\n‚úÖ Âá¶ÁêÜÂÆå‰∫Ü');
  console.log(`üìä ÂèñÂæó‰ª∂Êï∞: ${rows.length}‰ª∂`);
  console.log(`üìÑ CSV„Éï„Ç°„Ç§„É´: output/${filename}`);
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº:', error);
    process.exit(1);
  });
}

module.exports = { executeQuery, exportToCSV };
