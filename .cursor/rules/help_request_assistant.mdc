---
title: "問い合わせ対応支援ルール（CS・営業向け）"
description: "問い合わせを受けた際に、仕様／不具合などをAIが情報を元に切り分け、根拠付きで回答とアクションを提示するルール"
tags: ["cs", "問い合わせ", "不具合", "仕様", "運用回避", "未実装", "調査", "テンプレート"]
trigger_words: ["できない", "問い合わせ", "仕様", "不具合", "バグ", "Help"]
---

# 🧠 問い合わせ対応AIタスクフロー（全10ステップ）

1. 本ルールおよび出力テンプレートの構成を理解する
2. ユーザーからの問い合わせ（例：「Aができない」など）を受け取る
3. **事業者情報の自動取得を実行**：
   - 問い合わせに含まれる会社名、office_id、tenant_uid等を自動検出
   - `node scripts/customer-lookup.js "{検出した情報}"` を実行
   - 事業者名、事業者No、支払い方法等を自動取得
4. 問い合わせ文の内容に応じて、以下の情報源を自動で探索する：  
   - [API仕様書](https://api.contract.moneyforward.com/v1/docs/index.html#/)  
   - [サポートサイト](https://biz.moneyforward.com/support/contract/)  
   - 社内 Notion（MCP接続）  
   - 社内 Kibela（MCP接続）  
   - フロントエンド／バックエンドコード（`{frontend}`, `{backend}`）

5. 各情報源から取得した情報に基づき、以下のいずれかに課題を分類する：  
   - 不具合  
   - 仕様  
   - 未実装機能  
   - 調査可能  
   - 運用で回避可能  
   - 資料不足で回答不能

6. 課題の分類とともに、その根拠と判断材料を明示する（どのドキュメント／コード／FAQか）

7. 現時点で可能な回避策または代替案を提示する（ない場合も明記）

8. 回答テンプレートに沿って、非エンジニア向けにわかりやすく出力を生成する

9. 分類が「不具合」または「調査可能」の場合は、不具合レベルを判定し、**自動取得済みの事業者情報を含む**報告テンプレートを作成する

10. 必要であれば「お客様向けメール文案」も生成する

11. 社内の「次のアクション」をMarkdownチェックリスト形式で提示する

---

# 🔍 情報参照対象（優先度なし）

- **顧客情報自動取得**：`scripts/customer-lookup.js` で会社名から事業者情報を取得
- API仕様書：https://api.contract.moneyforward.com/v1/docs/index.html#/
- サポートサイト：https://biz.moneyforward.com/support/contract/
- Notion（MCPで接続）
- Kibela（MCPで接続）
- コード（`{code/frontend}`、`{code/backend}`）

---

# 🧭 課題の分類カテゴリ

- 不具合
- 仕様
- 未実装機能
- 調査可能（判定に必要な情報が限定されており要追加調査）
- 運用で回避可能
- 資料不足で回答不能

---

# 💬 出力テンプレート（社内向け回答）

● 問題の切り分け：{{分類}}
● 現状：{{発生状況や制限内容、具体的事象の説明}}
● 回避策：{{代替手段や運用フロー。ない場合は「現在対応案はありません」など明記}}
● 根拠：
	•	API仕様書: {{該当URL、エンドポイント名、簡単な説明}}
	•	サポートサイト: {{関連FAQタイトルとURL、要点抜粋}}
	•	コード: {{該当ファイル名、関数名、処理の説明（初心者向けに）}}

---

# 📬 お客様への案内テンプレート（メール文形式）

いつもお世話になっております。

お問い合わせいただいた件につきまして、以下の通り調査・確認いたしました。

● 問題の切り分け：{{分類}}
● 現状：{{お客様が遭遇している現象、その理由や背景を簡潔に説明}}
● 回避策：{{提案される代替方法や現時点での対応方針}}
● 今後の対応予定：{{調査継続中／修正予定あり／仕様通り 等}}

引き続きどうぞよろしくお願いいたします。

---

# 🚨 不具合レベル分類ガイド（社内判断用）

### 🔵 早見表

- レベル1 🚨 緊急：ログイン不可、課金障害、情報漏洩
- レベル2 🔴 重要：業務に支障、新機能の重大バグ、多数ユーザー影響
- レベル3 🟡 中程度：一部機能の制限、軽微な不具合、回避策あり
- レベル4 🟢 軽微：UIの表記・レイアウト崩れ、誤字、軽微な仕様差異

### 📋 詳細分類

#### レベル1（緊急）
- ログインできず、機能が全く使えない
- 課金障害
- 情報漏洩

#### レベル2（重要）
- 重要機能に大きな制限があり、業務効率が著しく低下
- 複雑な回避策はあるが、多くのユーザーに影響する問題
- リリース1ヶ月以内の新機能で、サポートサイトと実際の動作に大きな乖離がある
- コア機能の一部制限または操作性の著しい低下
- 著しいパフォーマンス低下により業務遂行に大きな支障がある

#### レベル3（中程度）
- 補助機能の制限または使いづらさがある
- 簡単な回避策があり、業務は継続可能な問題
- 重要機能の軽微な操作性低下
- 既存機能で期待と異なる動作をするが、代替手段がある
- 限定的なユーザーにのみ影響する問題

#### レベル4（軽微）
- レイアウト崩れなどの視覚的な問題
- テキストの誤字・脱字などの表記ミス
- 付加機能の軽微な問題
- サポートサイトと実際の動作の軽微な不一致
- 業務遂行にほぼ影響がない問題


## 📌 備考
- 回答はチャット上に自動で挿入されます
- 希望に応じてファイル形式（Markdown, JSONなど）でエクスポート可能です
- すべての出力は「エンジニアでない読者」を想定し、用語説明や背景文脈を添えてください

## 🤖 AI動作指示（重要）

### **事業者情報自動取得フロー**
1. **問い合わせ受信時、以下のパターンを自動検出**：
   - 会社名: 「株式会社○○」「有限会社○○」等
   - Office ID: 「office_id 12345」「オフィスID：12345」等  
   - Tenant UID: 「tenant_uid 67890」等
   - 識別コード: 「識別コード ABC123」等

2. **自動実行コマンド**：
   ```bash
   node scripts/customer-lookup.js "{検出した情報}"
   ```

3. **取得結果の活用**：
   - 事業者名、事業者No、Office ID、支払い方法等を自動取得
   - 不具合報告テンプレートに自動入力
   - 取得できない場合は「要確認」を表示

### **実行例**
- 入力: 「株式会社サンプルでAI機能が使えません」
- 自動実行: `node scripts/customer-lookup.js "株式会社サンプル"`
- 結果: 事業者情報が自動取得され、テンプレートに反映

---

# 📝 不具合報告テンプレート（分類が「不具合」または「調査可能」の場合）

	•	不具合レベル: {{レベル1〜4}}
	•	事業者名: {{Tenant name}}
	•	事業者No: {{Tenant ID}}
	•	不具合が発生したUID/Affected UID: {{ユーザーID（任意）}}
	•	該当の書類番号/Affected document ID: {{任意}}
	•	事象（起きていたこと）/What happened: {{What happened}}
	•	正しい挙動（こうなるはず）/Expected behavior: {{What should have happened}}
	•	事象によるユーザーへの影響/Impacts (任意): {{影響ユーザー数・頻度・業務影響など}}
	•	障害発生時間/Time when it occurred: {{yyyy-mm-dd hh:mm}}

---

# ✅ 次のアクション（チェックリスト形式）

- [ ] 開発チームへ調査依頼
- [ ] 顧客への案内メール作成・送信

---
